"""
Interface GUI para testar WebSocket de streaming de √°udio em tempo real
Desenvolvida com tkinter para testar a conex√£o e processamento de √°udio via WebSocket
"""

import tkinter as tk
from tkinter import ttk, scrolledtext, messagebox
import asyncio
import json
import base64
import threading
import time
import uuid
import wave
import io
import logging
from datetime import datetime
from tkinter import filedialog

# Tentativa de importar as bibliotecas de √°udio
try:
    import sounddevice as sd
    import numpy as np
    AUDIO_AVAILABLE = True
except ImportError:
    try:
        import pyaudio
        AUDIO_AVAILABLE = True
    except ImportError:
        AUDIO_AVAILABLE = False

try:
    import websockets
    WEBSOCKET_AVAILABLE = True
except ImportError:
    WEBSOCKET_AVAILABLE = False

# Configura√ß√£o de logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


class AudioWebSocketTester:
    def __init__(self, root):
        self.root = root
        self.root.title("üé§ CalmWave Audio WebSocket Tester")
        self.root.geometry("800x700")
        
        # Vari√°veis de estado
        self.websocket = None
        self.is_connected = False
        self.is_recording = False
        self.session_id = None
        self.chunk_counter = 0
        self.loop = None
        self.thread = None
        
        # Configura√ß√µes de √°udio - Otimizado para WAV
        self.sample_rate = 44100
        self.channels = 1
        self.chunk_duration = 5.0  # 5 segundos por chunk
        self.chunk_size = int(self.sample_rate * self.chunk_duration)  # samples para 5 segundos
        self.audio_format = np.float32 if AUDIO_AVAILABLE else None
        self.bits_per_sample = 16  # 16-bit para compatibilidade m√°xima
        
        # Buffer de √°udio
        self.audio_buffer = []
        self.processed_audio_buffer = []
        self.current_chunk_buffer = []
        
        # Sistema de reprodu√ß√£o em tempo real (como live streaming)
        self.live_audio_queue = []
        self.is_playing_live = False
        self.live_player_thread = None
        self.final_audio_path = None
        
        self.create_widgets()
        self.update_status()
        
        # Verifica depend√™ncias
        if not WEBSOCKET_AVAILABLE:
            self.log_message("‚ùå ERRO: websockets n√£o est√° instalado. Execute: pip install websockets")
        if not AUDIO_AVAILABLE:
            self.log_message("‚ùå ERRO: sounddevice ou pyaudio n√£o est√° instalado.")
    
    def create_widgets(self):
        """Cria os widgets da interface"""
        
        # Frame principal
        main_frame = ttk.Frame(self.root, padding="10")
        main_frame.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        
        # Configura√ß√£o do WebSocket
        websocket_frame = ttk.LabelFrame(main_frame, text="üîå Configura√ß√£o WebSocket", padding="10")
        websocket_frame.grid(row=0, column=0, columnspan=2, sticky=(tk.W, tk.E), pady=(0, 10))
        
        ttk.Label(websocket_frame, text="URL do WebSocket:").grid(row=0, column=0, sticky=tk.W)
        self.url_var = tk.StringVar(value="ws://localhost:5000/api/v1/streaming/ws/audio-streaming")
        url_entry = ttk.Entry(websocket_frame, textvariable=self.url_var, width=60)
        url_entry.grid(row=0, column=1, padx=(10, 0), sticky=(tk.W, tk.E))
        
        # Bot√µes de conex√£o
        connection_frame = ttk.Frame(websocket_frame)
        connection_frame.grid(row=1, column=0, columnspan=2, pady=(10, 0))
        
        self.connect_btn = ttk.Button(connection_frame, text="üîå Conectar", command=self.connect_websocket)
        self.connect_btn.pack(side=tk.LEFT, padx=(0, 10))
        
        self.disconnect_btn = ttk.Button(connection_frame, text="üîå Desconectar", command=self.disconnect_websocket, state=tk.DISABLED)
        self.disconnect_btn.pack(side=tk.LEFT, padx=(0, 10))
        
        self.ping_btn = ttk.Button(connection_frame, text="üèì Ping", command=self.send_ping, state=tk.DISABLED)
        self.ping_btn.pack(side=tk.LEFT)
        
        # Status da conex√£o
        self.connection_status = ttk.Label(websocket_frame, text="‚ùå Desconectado", foreground="red")
        self.connection_status.grid(row=2, column=0, columnspan=2, pady=(10, 0))
        
        # Frame de controle de √°udio
        audio_frame = ttk.LabelFrame(main_frame, text="üé§ Controle de √Åudio", padding="10")
        audio_frame.grid(row=1, column=0, columnspan=2, sticky=(tk.W, tk.E), pady=(0, 10))
        
        # Configura√ß√µes de √°udio
        config_frame = ttk.Frame(audio_frame)
        config_frame.grid(row=0, column=0, columnspan=2, sticky=(tk.W, tk.E))
        
        ttk.Label(config_frame, text="Sample Rate:").grid(row=0, column=0, sticky=tk.W)
        self.sample_rate_var = tk.StringVar(value="16000")  # Mudou para 16kHz como padr√£o
        sample_rate_combo = ttk.Combobox(config_frame, textvariable=self.sample_rate_var, values=["16000", "44100", "22050"], width=10)
        sample_rate_combo.grid(row=0, column=1, padx=(10, 0))
        
        # Label de recomenda√ß√£o
        ttk.Label(config_frame, text="(16kHz = IA otimizada)", font=("TkDefaultFont", 8), foreground="blue").grid(row=0, column=2, padx=(5, 0), sticky=tk.W)
        
        ttk.Label(config_frame, text="Chunk Duration (s):").grid(row=0, column=3, padx=(20, 0), sticky=tk.W)
        self.chunk_duration_var = tk.StringVar(value="5.0")
        ttk.Combobox(config_frame, textvariable=self.chunk_duration_var, values=["2.0", "5.0", "10.0"], width=10).grid(row=0, column=4, padx=(10, 0))
        
        # Indicador de formato
        ttk.Label(config_frame, text="Formato:", font=("TkDefaultFont", 9, "bold")).grid(row=1, column=0, sticky=tk.W, pady=(5, 0))
        self.format_label = ttk.Label(config_frame, text="üéµ WAV 16-bit PCM (16kHz otimizado)", foreground="green")
        self.format_label.grid(row=1, column=1, columnspan=3, sticky=tk.W, pady=(5, 0))
        
        # Bot√µes de grava√ß√£o
        recording_frame = ttk.Frame(audio_frame)
        recording_frame.grid(row=1, column=0, columnspan=2, pady=(10, 0))
        
        self.start_recording_btn = ttk.Button(recording_frame, text="üî¥ Iniciar Grava√ß√£o", command=self.start_recording, state=tk.DISABLED)
        self.start_recording_btn.pack(side=tk.LEFT, padx=(0, 10))
        
        self.stop_recording_btn = ttk.Button(recording_frame, text="‚èπÔ∏è Parar Grava√ß√£o", command=self.stop_recording, state=tk.DISABLED)
        self.stop_recording_btn.pack(side=tk.LEFT, padx=(0, 10))
        
        self.live_play_btn = ttk.Button(recording_frame, text="üìª Reprodu√ß√£o Live", command=self.toggle_live_playback, state=tk.DISABLED)
        self.live_play_btn.pack(side=tk.LEFT, padx=(0, 10))
        
        self.play_final_btn = ttk.Button(recording_frame, text="‚ñ∂Ô∏è Reproduzir Final", command=self.play_final_audio, state=tk.DISABLED)
        self.play_final_btn.pack(side=tk.LEFT, padx=(0, 10))
        
        self.save_final_btn = ttk.Button(recording_frame, text="üíæ Salvar Final", command=self.save_final_audio, state=tk.DISABLED)
        self.save_final_btn.pack(side=tk.LEFT, padx=(0, 10))
        
        self.test_wav_btn = ttk.Button(recording_frame, text="üß™ Testar WAV", command=self.test_wav_format, state=tk.NORMAL)
        self.test_wav_btn.pack(side=tk.LEFT)
        
        # Informa√ß√µes da sess√£o
        session_frame = ttk.LabelFrame(main_frame, text="üìä Informa√ß√µes da Sess√£o", padding="10")
        session_frame.grid(row=2, column=0, columnspan=2, sticky=(tk.W, tk.E), pady=(0, 10))
        
        self.session_info = ttk.Label(session_frame, text="Sess√£o: Nenhuma ativa")
        self.session_info.pack(anchor=tk.W)
        
        self.chunk_info = ttk.Label(session_frame, text="Chunks enviados: 0")
        self.chunk_info.pack(anchor=tk.W)
        
        self.processed_info = ttk.Label(session_frame, text="Chunks processados: 0")
        self.processed_info.pack(anchor=tk.W)
        
        self.live_status = ttk.Label(session_frame, text="üìª Live: Inativo")
        self.live_status.pack(anchor=tk.W)
        
        self.buffer_status = ttk.Label(session_frame, text="üîä Buffer: 0 chunks")
        self.buffer_status.pack(anchor=tk.W)
        
        self.processing_status = ttk.Label(session_frame, text="‚öôÔ∏è Processamento: 0/0 chunks")
        self.processing_status.pack(anchor=tk.W)
        
        # Log de mensagens
        log_frame = ttk.LabelFrame(main_frame, text="üìù Log de Mensagens", padding="10")
        log_frame.grid(row=3, column=0, columnspan=2, sticky=(tk.W, tk.E, tk.N, tk.S), pady=(0, 10))
        
        self.log_text = scrolledtext.ScrolledText(log_frame, height=15, wrap=tk.WORD)
        self.log_text.pack(fill=tk.BOTH, expand=True)
        
        # Frame de controles do log
        log_controls = ttk.Frame(log_frame)
        log_controls.pack(fill=tk.X, pady=(10, 0))
        
        clear_log_btn = ttk.Button(log_controls, text="üßπ Limpar Log", command=self.clear_log)
        clear_log_btn.pack(side=tk.LEFT)
        
        # Indicador de atividade
        self.activity_label = ttk.Label(log_controls, text="üí§ Inativo")
        self.activity_label.pack(side=tk.RIGHT)
        
        # Configurar expans√£o
        self.root.columnconfigure(0, weight=1)
        self.root.rowconfigure(0, weight=1)
        main_frame.columnconfigure(0, weight=1)
        main_frame.rowconfigure(3, weight=1)
        websocket_frame.columnconfigure(1, weight=1)
    
    def log_message(self, message):
        """Adiciona mensagem ao log"""
        timestamp = datetime.now().strftime("%H:%M:%S")
        log_entry = f"[{timestamp}] {message}\n"
        
        self.log_text.insert(tk.END, log_entry)
        self.log_text.see(tk.END)
        logger.info(message)
    
    def clear_log(self):
        """Limpa o log de mensagens"""
        self.log_text.delete(1.0, tk.END)
    
    def update_status(self):
        """Atualiza o status da interface"""
        if self.is_connected:
            self.connection_status.config(text="‚úÖ Conectado", foreground="green")
            self.connect_btn.config(state=tk.DISABLED)
            self.disconnect_btn.config(state=tk.NORMAL)
            self.ping_btn.config(state=tk.NORMAL)
            self.start_recording_btn.config(state=tk.NORMAL)
        else:
            self.connection_status.config(text="‚ùå Desconectado", foreground="red")
            self.connect_btn.config(state=tk.NORMAL)
            self.disconnect_btn.config(state=tk.DISABLED)
            self.ping_btn.config(state=tk.DISABLED)
            self.start_recording_btn.config(state=tk.DISABLED)
            self.stop_recording_btn.config(state=tk.DISABLED)
        
        if self.session_id:
            self.session_info.config(text=f"Sess√£o: {self.session_id}")
        else:
            self.session_info.config(text="Sess√£o: Nenhuma ativa")
        
        self.chunk_info.config(text=f"Chunks enviados: {self.chunk_counter}")
        self.processed_info.config(text=f"Chunks processados: {len(self.processed_audio_buffer)}")
        
        # Atualiza status do live player
        if self.is_playing_live:
            self.live_status.config(text="üìª Live: Ativo", foreground="green")
            self.live_play_btn.config(text="‚è∏Ô∏è Pausar Live")
        else:
            self.live_status.config(text="üìª Live: Inativo", foreground="red")
            self.live_play_btn.config(text="üìª Reprodu√ß√£o Live")
        
        self.buffer_status.config(text=f"üîä Buffer: {len(self.live_audio_queue)} chunks")
        self.processing_status.config(text=f"‚öôÔ∏è Processamento: {len(self.processed_audio_buffer)}/{self.chunk_counter} chunks")
        
        # Habilita bot√µes conforme necess√°rio
        if len(self.processed_audio_buffer) > 0:
            self.live_play_btn.config(state=tk.NORMAL)
            self.play_final_btn.config(state=tk.NORMAL)
            self.save_final_btn.config(state=tk.NORMAL)
    
    def connect_websocket(self):
        """Conecta ao WebSocket"""
        if not WEBSOCKET_AVAILABLE:
            messagebox.showerror("Erro", "websockets n√£o est√° instalado!")
            return
        
        url = self.url_var.get()
        if not url:
            messagebox.showerror("Erro", "URL do WebSocket √© obrigat√≥ria!")
            return
        
        self.log_message(f"üîå Tentando conectar ao WebSocket: {url}")
        
        # Inicia thread para conex√£o WebSocket
        self.thread = threading.Thread(target=self.run_websocket_client, args=(url,))
        self.thread.daemon = True
        self.thread.start()
    
    def disconnect_websocket(self):
        """Desconecta do WebSocket"""
        self.log_message("üîå Desconectando do WebSocket...")
        self.is_connected = False
        
        if self.is_recording:
            self.stop_recording()
        
        if self.websocket:
            asyncio.run_coroutine_threadsafe(self.websocket.close(), self.loop)
        
        self.websocket = None
        self.session_id = None
        self.chunk_counter = 0
        self.update_status()
    
    def run_websocket_client(self, url):
        """Executa o cliente WebSocket em thread separada"""
        try:
            # Cria novo loop de eventos para esta thread
            self.loop = asyncio.new_event_loop()
            asyncio.set_event_loop(self.loop)
            
            # Conecta ao WebSocket
            self.loop.run_until_complete(self.websocket_client(url))
        except Exception as e:
            self.log_message(f"‚ùå Erro na conex√£o WebSocket: {str(e)}")
            self.is_connected = False
            self.root.after(0, self.update_status)
    
    async def websocket_client(self, url):
        """Cliente WebSocket ass√≠ncrono"""
        try:
            async with websockets.connect(url) as websocket:
                self.websocket = websocket
                self.is_connected = True
                self.root.after(0, self.update_status)
                self.root.after(0, lambda: self.log_message("‚úÖ Conectado ao WebSocket!"))
                
                # Escuta mensagens do servidor
                async for message in websocket:
                    await self.handle_websocket_message(message)
                    
        except websockets.exceptions.ConnectionClosed:
            self.root.after(0, lambda: self.log_message("üîå Conex√£o WebSocket fechada"))
        except Exception as e:
            error_msg = f"‚ùå Erro WebSocket: {str(e)}"
            self.root.after(0, lambda: self.log_message(error_msg))
        finally:
            self.is_connected = False
            self.websocket = None
            self.root.after(0, self.update_status)
    
    async def handle_websocket_message(self, message):
        """Processa mensagens recebidas do WebSocket"""
        try:
            data = json.loads(message)
            msg_type = data.get("type", "unknown")
            
            if msg_type == "connection_established":
                self.root.after(0, lambda: self.log_message("üéâ Conex√£o estabelecida com sucesso!"))
            
            elif msg_type == "session_started":
                session_id = data.get("session_id")
                self.root.after(0, lambda: self.log_message(f"üéØ Sess√£o iniciada: {session_id}"))
            
            elif msg_type == "audio_processed":
                status = data.get("status", "unknown")
                message = data.get("message", "")
                processed_data = data.get("processed_audio_data")
                
                self.root.after(0, lambda: self.log_message(f"üì® Resposta do servidor: {status} - {message}"))
                
                if processed_data:
                    try:
                        # Decodifica √°udio processado
                        audio_bytes = base64.b64decode(processed_data)
                        
                        # Adiciona ao buffer principal
                        self.processed_audio_buffer.append(audio_bytes)
                        
                        # Adiciona √† fila de reprodu√ß√£o live
                        self.live_audio_queue.append(audio_bytes)
                        
                        chunk_num = len(self.processed_audio_buffer)
                        self.root.after(0, lambda: self.log_message(f"üéµ Chunk {chunk_num} processado ({len(audio_bytes)} bytes) - Adicionado √† fila live"))
                        
                        # Atualiza indicador de atividade
                        self.root.after(0, lambda: self.activity_label.config(text="üü¢ Processando", foreground="green"))
                        
                    except Exception as e:
                        self.root.after(0, lambda: self.log_message(f"‚ùå Erro ao decodificar √°udio: {str(e)}"))
                else:
                    if status == "processing":
                        self.root.after(0, lambda: self.log_message(f"‚è≥ Chunk recebido pelo servidor, aguardando processamento..."))
                    elif status == "error":
                        self.root.after(0, lambda: self.log_message(f"‚ùå Erro no servidor: {message}"))
                    else:
                        self.root.after(0, lambda: self.log_message(f"‚ÑπÔ∏è  Status: {status} - {message}"))
                
                self.root.after(0, self.update_status)
            
            elif msg_type == "error":
                error_msg = data.get("message", "Erro desconhecido")
                self.root.after(0, lambda: self.log_message(f"‚ùå Erro do servidor: {error_msg}"))
            
            elif msg_type == "pong":
                self.root.after(0, lambda: self.log_message("üèì Pong recebido"))
            
            else:
                self.root.after(0, lambda: self.log_message(f"üì® Mensagem recebida: {msg_type}"))
                
        except json.JSONDecodeError:
            self.root.after(0, lambda: self.log_message(f"‚ùå Erro JSON na mensagem: {message}"))
        except Exception as e:
            self.root.after(0, lambda: self.log_message(f"‚ùå Erro ao processar mensagem: {str(e)}"))
    
    def start_recording(self):
        """Inicia a grava√ß√£o de √°udio"""
        if not AUDIO_AVAILABLE:
            messagebox.showerror("Erro", "Biblioteca de √°udio n√£o dispon√≠vel!")
            return
        
        if not self.is_connected:
            messagebox.showerror("Erro", "Conecte-se ao WebSocket primeiro!")
            return
        
        # Cria nova sess√£o
        self.session_id = str(uuid.uuid4())
        self.chunk_counter = 0
        self.audio_buffer = []
        self.processed_audio_buffer = []
        self.current_chunk_buffer = []
        self.live_audio_queue = []
        
        # Para reprodu√ß√£o live se estiver ativa
        if self.is_playing_live:
            self.stop_live_playback()
        
        # Atualiza configura√ß√µes de √°udio
        self.sample_rate = int(self.sample_rate_var.get())
        self.chunk_duration = float(self.chunk_duration_var.get())
        self.chunk_size = int(self.sample_rate * self.chunk_duration)
        
        # Atualiza indicador de formato
        self.update_format_indicator()
        
        # Envia mensagem de in√≠cio de sess√£o
        start_message = {
            "type": "start_session",
            "session_id": self.session_id
        }
        
        asyncio.run_coroutine_threadsafe(
            self.websocket.send(json.dumps(start_message)), 
            self.loop
        )
        
        self.log_message(f"üé§ Iniciando grava√ß√£o - Sess√£o: {self.session_id}")
        self.log_message(f"üìä Sample Rate: {self.sample_rate}Hz, Chunk Duration: {self.chunk_duration}s, Chunk Size: {self.chunk_size} samples")
        
        # Aviso sobre compatibilidade com modelo IA
        if self.sample_rate != 16000:
            self.log_message(f"‚ö†Ô∏è AVISO: Modelo IA usa 16kHz. Seu √°udio ({self.sample_rate}Hz) ser√° convertido temporariamente.")
            self.log_message(f"üìù Para melhor qualidade, considere usar 16000Hz como Sample Rate.")
        
        self.is_recording = True
        self.start_recording_btn.config(state=tk.DISABLED)
        self.stop_recording_btn.config(state=tk.NORMAL)
        
        # Inicia grava√ß√£o em thread separada
        self.recording_thread = threading.Thread(target=self.record_audio)
        self.recording_thread.daemon = True
        self.recording_thread.start()
        
        self.update_status()
    
    def stop_recording(self):
        """Para a grava√ß√£o de √°udio"""
        self.log_message("‚èπÔ∏è Parando grava√ß√£o...")
        self.is_recording = False
        
        # Processa chunk final se houver √°udio restante
        if hasattr(self, 'current_chunk_buffer') and self.current_chunk_buffer:
            try:
                # Combina o √°udio restante
                remaining_audio = np.concatenate(self.current_chunk_buffer)
                if len(remaining_audio) > 0:
                    # Envia como chunk final
                    audio_bytes = self.numpy_to_wav_bytes(remaining_audio)
                    self.send_audio_chunk(audio_bytes, is_final=True)
                    self.log_message(f"üì§ Chunk final enviado ({len(audio_bytes)} bytes) - {len(remaining_audio)/self.sample_rate:.1f}s de √°udio")
            except Exception as e:
                self.log_message(f"‚ùå Erro ao processar chunk final: {str(e)}")
        
        # Envia mensagem de fim de sess√£o
        if self.websocket and self.session_id:
            stop_message = {
                "type": "stop_session",
                "session_id": self.session_id
            }
            
            asyncio.run_coroutine_threadsafe(
                self.websocket.send(json.dumps(stop_message)), 
                self.loop
            )
        
        self.start_recording_btn.config(state=tk.NORMAL)
        self.stop_recording_btn.config(state=tk.DISABLED)
        
        # Mensagem informativa sobre finaliza√ß√£o
        self.log_message("‚úÖ Grava√ß√£o finalizada - aguarde o processamento dos chunks restantes...")
        
        self.update_status()
    
    def record_audio(self):
        """Grava √°udio usando sounddevice com chunks de 5 segundos"""
        try:
            # Buffer para acumular √°udio
            self.current_chunk_buffer = []
            
            def audio_callback(indata, frames, time, status):
                if self.is_recording:
                    # Adiciona os dados ao buffer atual
                    self.current_chunk_buffer.append(indata[:, 0].copy())  # Mono
                    
                    # Verifica se temos √°udio suficiente para um chunk de 5 segundos
                    total_samples = sum(len(chunk) for chunk in self.current_chunk_buffer)
                    if total_samples >= self.chunk_size:
                        # Combina todos os dados do buffer
                        combined_audio = np.concatenate(self.current_chunk_buffer)
                        
                        # Pega exatamente o que precisamos para o chunk
                        chunk_audio = combined_audio[:self.chunk_size]
                        
                        # Converte para bytes WAV e envia
                        audio_bytes = self.numpy_to_wav_bytes(chunk_audio)
                        self.send_audio_chunk(audio_bytes)
                        
                        # Guarda o restante para o pr√≥ximo chunk
                        remaining_audio = combined_audio[self.chunk_size:]
                        self.current_chunk_buffer = [remaining_audio] if len(remaining_audio) > 0 else []
            
            # Inicia stream de √°udio com buffer menor para responsividade
            buffer_size = 1024  # Buffer pequeno para baixa lat√™ncia
            
            with sd.InputStream(
                samplerate=self.sample_rate,
                channels=self.channels,
                dtype=self.audio_format,
                blocksize=buffer_size,
                callback=audio_callback
            ):
                while self.is_recording:
                    time.sleep(0.1)
                    
        except Exception as e:
            self.root.after(0, lambda: self.log_message(f"‚ùå Erro na grava√ß√£o: {str(e)}"))
            self.is_recording = False
            self.root.after(0, self.update_status)
    
    def numpy_to_wav_bytes(self, audio_data):
        """Converte array numpy para bytes WAV com formato padr√£o"""
        try:
            # Normaliza e converte para int16 (16-bit PCM)
            if audio_data.dtype == np.float32:
                # Clamp valores entre -1 e 1
                audio_data = np.clip(audio_data, -1.0, 1.0)
                audio_int16 = (audio_data * 32767).astype(np.int16)
            else:
                audio_int16 = audio_data.astype(np.int16)
            
            # Cria arquivo WAV padr√£o em mem√≥ria
            buffer = io.BytesIO()
            with wave.open(buffer, 'wb') as wav_file:
                wav_file.setnchannels(self.channels)  # Mono = 1
                wav_file.setsampwidth(2)  # 16-bit = 2 bytes
                wav_file.setframerate(self.sample_rate)  # 44100 Hz
                wav_file.setcomptype('NONE', 'not compressed')  # PCM n√£o comprimido
                wav_file.writeframes(audio_int16.tobytes())
            
            wav_bytes = buffer.getvalue()
            
            # Valida√ß√£o b√°sica do WAV
            if len(wav_bytes) < 44:  # Cabe√ßalho WAV m√≠nimo
                raise ValueError("WAV gerado √© muito pequeno")
            
            # Verifica se come√ßa com 'RIFF'
            if not wav_bytes.startswith(b'RIFF'):
                raise ValueError("Cabe√ßalho WAV inv√°lido")
            
            return wav_bytes
            
        except Exception as e:
            self.root.after(0, lambda: self.log_message(f"‚ùå Erro ao criar WAV: {str(e)}"))
            return None
    
    def send_audio_chunk(self, audio_bytes, is_final=False):
        """Envia chunk de √°udio WAV via WebSocket com valida√ß√£o"""
        if not self.websocket:
            return
        
        if not audio_bytes:
            self.root.after(0, lambda: self.log_message(f"‚ùå √Åudio vazio n√£o enviado"))
            return
        
        try:
            self.chunk_counter += 1
            
            # Valida√ß√£o do formato WAV
            if not audio_bytes.startswith(b'RIFF'):
                self.root.after(0, lambda: self.log_message(f"‚ö†Ô∏è Aviso: Chunk {self.chunk_counter} pode n√£o ser WAV v√°lido"))
            
            # Codifica √°udio em base64
            audio_b64 = base64.b64encode(audio_bytes).decode('utf-8')
            
            # Cria mensagem com informa√ß√µes do formato
            message = {
                "type": "audio_chunk",
                "session_id": self.session_id,
                "chunk_id": f"chunk_{self.chunk_counter}",
                "audio_data": audio_b64,
                "is_final": is_final,
                "format": "wav",  # Especifica que √© WAV
                "sample_rate": self.sample_rate,
                "channels": self.channels,
                "bits_per_sample": self.bits_per_sample
            }
            
            # Envia via WebSocket
            asyncio.run_coroutine_threadsafe(
                self.websocket.send(json.dumps(message)), 
                self.loop
            )
            
            # Atualiza UI - log detalhado
            duration_mb = len(audio_bytes) / (1024 * 1024)  # Tamanho em MB
            duration_s = len(audio_bytes) / (self.sample_rate * self.channels * 2)  # Dura√ß√£o estimada
            
            self.root.after(0, lambda: self.log_message(f"üì§ WAV Chunk {self.chunk_counter} enviado:"))
            self.root.after(0, lambda: self.log_message(f"   üìä Tamanho: {len(audio_bytes)} bytes ({duration_mb:.2f}MB)"))
            self.root.after(0, lambda: self.log_message(f"   ‚è±Ô∏è Dura√ß√£o: ~{duration_s:.1f}s | {self.sample_rate}Hz | {self.channels}ch | {self.bits_per_sample}bit"))
            
            self.root.after(0, self.update_status)
                
        except Exception as e:
            self.root.after(0, lambda: self.log_message(f"‚ùå Erro ao enviar chunk WAV: {str(e)}"))
    
    def toggle_live_playback(self):
        """Liga/desliga reprodu√ß√£o live"""
        if self.is_playing_live:
            self.stop_live_playback()
        else:
            self.start_live_playback()
    
    def start_live_playback(self):
        """Inicia reprodu√ß√£o live (como streaming)"""
        if not AUDIO_AVAILABLE:
            messagebox.showerror("Erro", "Biblioteca de √°udio n√£o dispon√≠vel!")
            return
        
        self.is_playing_live = True
        self.log_message("üìª Iniciando reprodu√ß√£o live - √°udio ser√° reproduzido conforme processado")
        
        # Inicia thread do reprodutor live
        self.live_player_thread = threading.Thread(target=self.live_player_worker)
        self.live_player_thread.daemon = True
        self.live_player_thread.start()
        
        self.update_status()
    
    def stop_live_playback(self):
        """Para reprodu√ß√£o live"""
        self.is_playing_live = False
        self.log_message("‚è∏Ô∏è Reprodu√ß√£o live parada")
        self.update_status()
    
    def live_player_worker(self):
        """Worker thread para reprodu√ß√£o live"""
        try:
            while self.is_playing_live:
                # Verifica se h√° √°udio na fila
                if self.live_audio_queue:
                    # Pega o pr√≥ximo chunk da fila
                    audio_bytes = self.live_audio_queue.pop(0)
                    
                    try:
                        # Carrega o √°udio WAV do buffer
                        audio_buffer = io.BytesIO(audio_bytes)
                        
                        # L√™ o arquivo WAV
                        with wave.open(audio_buffer, 'rb') as wav_file:
                            frames = wav_file.readframes(wav_file.getnframes())
                            audio_data = np.frombuffer(frames, dtype=np.int16).astype(np.float32) / 32767
                        
                        # Reproduz o chunk
                        sd.play(audio_data, samplerate=self.sample_rate)
                        sd.wait()  # Aguarda terminar de tocar
                        
                        self.root.after(0, lambda: self.log_message("üîä Chunk reproduzido em live"))
                        self.root.after(0, self.update_status)
                        
                    except Exception as e:
                        self.root.after(0, lambda: self.log_message(f"‚ùå Erro ao reproduzir chunk live: {str(e)}"))
                
                else:
                    # N√£o h√° √°udio na fila, aguarda um pouco
                    time.sleep(0.1)
                    
        except Exception as e:
            self.root.after(0, lambda: self.log_message(f"‚ùå Erro no reprodutor live: {str(e)}"))
        finally:
            self.is_playing_live = False
            self.root.after(0, self.update_status)
    
    def play_final_audio(self):
        """Reproduz todo o √°udio processado final"""
        if not self.processed_audio_buffer:
            messagebox.showinfo("Info", "Nenhum √°udio processado dispon√≠vel!")
            return
        
        self.log_message("‚ñ∂Ô∏è Reproduzindo √°udio final completo...")
        
        try:
            # Para reprodu√ß√£o live se estiver ativa
            if self.is_playing_live:
                self.stop_live_playback()
            
            # Thread para reprodu√ß√£o do √°udio final
            def play_final_thread():
                try:
                    for i, audio_bytes in enumerate(self.processed_audio_buffer):
                        # Carrega o √°udio WAV do buffer
                        audio_buffer = io.BytesIO(audio_bytes)
                        
                        # L√™ o arquivo WAV
                        with wave.open(audio_buffer, 'rb') as wav_file:
                            frames = wav_file.readframes(wav_file.getnframes())
                            audio_data = np.frombuffer(frames, dtype=np.int16).astype(np.float32) / 32767
                        
                        # Reproduz o chunk
                        sd.play(audio_data, samplerate=self.sample_rate)
                        sd.wait()  # Aguarda terminar de tocar
                        
                        self.root.after(0, lambda i=i: self.log_message(f"üéµ Reproduzindo chunk {i+1}/{len(self.processed_audio_buffer)}"))
                    
                    self.root.after(0, lambda: self.log_message("‚úÖ Reprodu√ß√£o final conclu√≠da!"))
                    
                except Exception as e:
                    self.root.after(0, lambda: self.log_message(f"‚ùå Erro na reprodu√ß√£o final: {str(e)}"))
            
            # Inicia thread
            final_thread = threading.Thread(target=play_final_thread)
            final_thread.daemon = True
            final_thread.start()
            
        except Exception as e:
            self.log_message(f"‚ùå Erro ao iniciar reprodu√ß√£o final: {str(e)}")
    
    def save_final_audio(self):
        """Salva o √°udio processado final em arquivo"""
        if not self.processed_audio_buffer:
            messagebox.showinfo("Info", "Nenhum √°udio processado dispon√≠vel!")
            return
        
        try:
            # Gera nome do arquivo com timestamp
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            default_filename = f"audio_processado_final_{timestamp}.wav"
            
            # Abre dialog para escolher onde salvar
            filename = filedialog.asksaveasfilename(
                defaultextension=".wav",
                filetypes=[("WAV files", "*.wav"), ("All files", "*.*")],
                initialvalue=default_filename,
                title="Salvar √°udio processado final"
            )
            
            if not filename:  # Usu√°rio cancelou
                return
            
            # Combina todos os chunks de √°udio processado
            combined_audio_data = []
            
            for audio_bytes in self.processed_audio_buffer:
                # Carrega cada chunk WAV
                audio_buffer = io.BytesIO(audio_bytes)
                with wave.open(audio_buffer, 'rb') as wav_file:
                    frames = wav_file.readframes(wav_file.getnframes())
                    combined_audio_data.append(frames)
            
            # Combina todos os frames
            final_frames = b''.join(combined_audio_data)
            
            # Salva como arquivo WAV
            with wave.open(filename, 'wb') as final_wav:
                final_wav.setnchannels(1)  # Mono
                final_wav.setsampwidth(2)  # 16-bit
                final_wav.setframerate(self.sample_rate)
                final_wav.writeframes(final_frames)
            
            self.final_audio_path = filename
            duration = len(final_frames) / (self.sample_rate * 2)  # 2 bytes por sample
            
            self.log_message(f"üíæ √Åudio final salvo: {filename}")
            self.log_message(f"üìä Dura√ß√£o: {duration:.1f}s, Tamanho: {len(final_frames)} bytes")
            
            messagebox.showinfo("Sucesso", f"√Åudio salvo como:\n{filename}\n\nDura√ß√£o: {duration:.1f}s")
            
        except Exception as e:
            self.log_message(f"‚ùå Erro ao salvar √°udio: {str(e)}")
            messagebox.showerror("Erro", f"Erro ao salvar √°udio:\n{str(e)}")
    
    def send_ping(self):
        """Envia ping para testar conex√£o"""
        if not self.websocket or not self.is_connected:
            return
        
        ping_message = {
            "type": "ping",
            "timestamp": time.time()
        }
        
        try:
            asyncio.run_coroutine_threadsafe(
                self.websocket.send(json.dumps(ping_message)), 
                self.loop
            )
            self.log_message("üèì Ping enviado para o servidor")
        except Exception as e:
            self.log_message(f"‚ùå Erro ao enviar ping: {str(e)}")
    
    def test_wav_format(self):
        """Testa a gera√ß√£o de formato WAV"""
        if not AUDIO_AVAILABLE:
            messagebox.showerror("Erro", "Biblioteca de √°udio n√£o dispon√≠vel!")
            return
        
        try:
            self.log_message("üß™ Testando gera√ß√£o de formato WAV...")
            
            # Gera 1 segundo de √°udio de teste (tom senoidal)
            duration = 1.0  # 1 segundo
            frequency = 440  # L√° central (440 Hz)
            t = np.linspace(0, duration, int(self.sample_rate * duration), False)
            test_audio = np.sin(2 * np.pi * frequency * t).astype(np.float32) * 0.5
            
            # Converte para WAV
            wav_bytes = self.numpy_to_wav_bytes(test_audio)
            
            if wav_bytes:
                # Valida√ß√µes
                size_mb = len(wav_bytes) / (1024 * 1024)
                is_riff = wav_bytes.startswith(b'RIFF')
                has_wave = b'WAVE' in wav_bytes[:12]
                has_fmt = b'fmt ' in wav_bytes[:100]
                has_data = b'data' in wav_bytes
                
                self.log_message(f"‚úÖ WAV gerado com sucesso:")
                self.log_message(f"   üìä Tamanho: {len(wav_bytes)} bytes ({size_mb:.3f}MB)")
                self.log_message(f"   üîç RIFF header: {'‚úÖ' if is_riff else '‚ùå'}")
                self.log_message(f"   üîç WAVE format: {'‚úÖ' if has_wave else '‚ùå'}")
                self.log_message(f"   üîç fmt chunk: {'‚úÖ' if has_fmt else '‚ùå'}")
                self.log_message(f"   üîç data chunk: {'‚úÖ' if has_data else '‚ùå'}")
                
                # Testa reprodu√ß√£o
                self.log_message("üîä Reproduzindo tom de teste (440Hz por 1s)...")
                
                def play_test_audio():
                    try:
                        sd.play(test_audio, samplerate=self.sample_rate)
                        sd.wait()
                        self.root.after(0, lambda: self.log_message("‚úÖ Teste de √°udio conclu√≠do!"))
                    except Exception as e:
                        self.root.after(0, lambda: self.log_message(f"‚ùå Erro na reprodu√ß√£o: {str(e)}"))
                
                # Reproduz em thread separada
                test_thread = threading.Thread(target=play_test_audio)
                test_thread.daemon = True
                test_thread.start()
                
            else:
                self.log_message("‚ùå Falha na gera√ß√£o do WAV")
                
        except Exception as e:
            self.log_message(f"‚ùå Erro no teste WAV: {str(e)}")
    
    def update_format_indicator(self):
        """Atualiza o indicador de formato conforme as configura√ß√µes"""
        sample_rate = int(self.sample_rate_var.get()) if hasattr(self, 'sample_rate_var') else self.sample_rate
        
        if sample_rate == 16000:
            self.format_label.config(
                text="üéµ WAV 16-bit PCM (16kHz - IA OTIMIZADO)", 
                foreground="green"
            )
        elif sample_rate == 44100:
            self.format_label.config(
                text="üéµ WAV 16-bit PCM (44kHz - CONVERS√ÉO AUTOM√ÅTICA)", 
                foreground="orange"
            )
        else:
            self.format_label.config(
                text=f"üéµ WAV 16-bit PCM ({sample_rate}Hz - CONVERS√ÉO AUTOM√ÅTICA)", 
                foreground="orange"
            )


def main():
    """Fun√ß√£o principal"""
    # Verifica depend√™ncias
    missing_deps = []
    
    if not WEBSOCKET_AVAILABLE:
        missing_deps.append("websockets")
    
    if not AUDIO_AVAILABLE:
        missing_deps.append("sounddevice ou pyaudio")
    
    if missing_deps:
        print("‚ùå Depend√™ncias faltando:")
        for dep in missing_deps:
            print(f"   - {dep}")
        print("\nüì¶ Para instalar:")
        print("   pip install websockets sounddevice numpy")
        
        # Cria GUI mesmo sem depend√™ncias para mostrar erro
    
    # Cria e executa GUI
    root = tk.Tk()
    app = AudioWebSocketTester(root)
    
    try:
        root.mainloop()
    except KeyboardInterrupt:
        print("\nüëã Encerrando aplica√ß√£o...")


if __name__ == "__main__":
    main()