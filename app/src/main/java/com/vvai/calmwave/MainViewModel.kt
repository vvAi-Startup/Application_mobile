package com.vvai.calmwave

import android.content.Context
import androidx.lifecycle.ViewModel
import androidx.lifecycle.ViewModelProvider
import androidx.lifecycle.viewModelScope
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.delay
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.flow.asStateFlow
import kotlinx.coroutines.launch
import kotlinx.coroutines.withContext
import java.io.File
import com.vvai.calmwave.service.AudioUploadService

class MainViewModel(
    private val audioService: AudioService,
    private val wavRecorder: WavRecorder,
    private val context: Context
) : ViewModel() {
    
    // Servi√ßo de upload
    private val uploadService = AudioUploadService()

    // Defini√ß√£o do Estado da UI
    private val _uiState = MutableStateFlow(UiState())
    val uiState: StateFlow<UiState> = _uiState.asStateFlow()

    data class UiState(
        val isRecording: Boolean = false,
        val isProcessing: Boolean = false,
        val statusText: String = "Pronto para gravar",
        val isPlaying: Boolean = false,
        val isPaused: Boolean = false,
        val currentPosition: Long = 0,
        val totalDuration: Long = 0,
        val playbackProgress: Float = 0f,
        val wavFiles: List<File> = emptyList(),
        val currentPlayingFile: String? = null,
        val hasActiveAudio: Boolean = false, // Para manter a barra vis√≠vel mesmo quando pausado
        val isUploading: Boolean = false,
        val uploadProgress: Int = 0 // Progresso do upload em porcentagem
    )

    // Vari√°vel para armazenar o caminho do arquivo de grava√ß√£o atual
    private var currentRecordingPath: String? = null
    private var onProcessedAudioSaved: ((File) -> Unit)? = null

    fun setProcessedAudioSaveCallback(callback: (File) -> Unit) {
        onProcessedAudioSaved = callback
    }

    // Bloco de inicializa√ß√£o para o ViewModel
    init {
        // Inicializa o AudioService com o contexto da aplica√ß√£o
        audioService.init(context.applicationContext)
        // Inicia um loop de atualiza√ß√£o de reprodu√ß√£o
        startPlaybackMonitor()
    }

    // Fun√ß√µes de Grava√ß√£o e Processamento
    fun startRecording(filePath: String) {
        viewModelScope.launch(Dispatchers.IO) {
            _uiState.value = _uiState.value.copy(
                isRecording = true,
                statusText = "Iniciando grava√ß√£o...",
                isPlaying = false
            )
            
            // Para qualquer reprodu√ß√£o anterior
            audioService.stopPlayback()

            try {
                // Configura conex√£o WebSocket e callback para envio de chunks
                val wsUrl = Config.wsStreamUrl
                audioService.connectWebSocket(wsUrl, context,
                    onConnected = {
                        println("WebSocket conectado")
                    },
                    onFailure = { e ->
                        println("Falha no WebSocket: ${e.message}")
                    }
                )
                
                wavRecorder.setChunkCallback { chunkData, chunkIndex, overlapSize ->
                    viewModelScope.launch {
                        println("MainViewModel: Recebendo chunk $chunkIndex do WavRecorder (${chunkData.size} bytes, overlap: $overlapSize)")
                        
                        // Remove o overlap para evitar duplicidade aud√≠vel na reprodu√ß√£o
                        val dataToProcess = if (chunkIndex > 0 && overlapSize > 0) {
                            // Remove a por√ß√£o de overlap do in√≠cio da chunk (o √°udio duplicado)
                            chunkData.copyOfRange(overlapSize, chunkData.size)
                        } else {
                            // Primeira chunk n√£o tem overlap a ser removido
                            chunkData
                        }
                        
                        println("MainViewModel: Dados ap√≥s remo√ß√£o do overlap: ${dataToProcess.size} bytes")
                        
                        // Atualiza o status para mostrar que est√° enviando chunk
                        _uiState.value = _uiState.value.copy(
                            statusText = "Enviando chunk ${chunkIndex + 1} via WebSocket..."
                        )
                        
                        // Envia o chunk completo (COM overlap) para o backend para processamento robusto
                        audioService.sendAudioChunkViaWebSocket(chunkData)
                        
                        // Atualiza o status de volta para grava√ß√£o
                        _uiState.value = _uiState.value.copy(
                            statusText = "Gravando... (pr√≥ximo chunk em 1s)"
                        )
                    }
                }
                
                // Inicia o bluetooth SCO e a grava√ß√£o
                audioService.startBluetoothSco()
                wavRecorder.startRecording(filePath)
                currentRecordingPath = filePath
                
                _uiState.value = _uiState.value.copy(statusText = "Gravando... (primeiro chunk ser√° enviado em 1s)")
            } catch (e: Exception) {
                e.printStackTrace()
                _uiState.value = _uiState.value.copy(
                    isRecording = false,
                    statusText = "Erro ao iniciar grava√ß√£o: ${e.message}"
                )
                audioService.stopBluetoothSco()
            }
        }
    }

    fun stopRecordingAndProcess(apiEndpoint: String) {
        viewModelScope.launch(Dispatchers.IO) {
            _uiState.value = _uiState.value.copy(
                isRecording = false,
                isProcessing = true,
                statusText = "Parando grava√ß√£o e processando...",
                currentPosition = 0 // Resetar contador ao encerrar
            )
            try {
                wavRecorder.stopRecording()
                audioService.stopBluetoothSco()
                // Desconecta WS e finaliza arquivo processado
                audioService.disconnectWebSocket()

                val audioFile = currentRecordingPath?.let { File(it) }
                if (audioFile?.exists() == true) {
                    // Verifica se h√° um arquivo processado para salvar
                    val processedFilePath = saveProcessedAudio()
                    val fileToTranscribe: File
                    val audioSource: String
                    
                    if (processedFilePath != null) {
                        val processedFile = File(processedFilePath)
                        // Chama o callback para salvar automaticamente no Downloads
                        onProcessedAudioSaved?.invoke(processedFile)
                        fileToTranscribe = processedFile
                        audioSource = "processado"
                        println("üìÅ Usando arquivo processado para transcri√ß√£o: ${processedFile.absolutePath}")
                    } else {
                        // Fallback: usa o arquivo original da grava√ß√£o
                        fileToTranscribe = audioFile
                        audioSource = "original"
                        println("üìÅ Arquivo processado indispon√≠vel, usando arquivo original: ${audioFile.absolutePath}")
                    }
                    
                    _uiState.value = _uiState.value.copy(
                        statusText = "√Åudio salvo! Testando conectividade..."
                    )
                    
                    // Testa conectividade antes de tentar transcri√ß√£o
                    val isEndpointAvailable = uploadService.testTranscriptionEndpoint(apiEndpoint)
                    if (!isEndpointAvailable) {
                        _uiState.value = _uiState.value.copy(
                            statusText = "‚ö†Ô∏è Servidor de transcri√ß√£o indispon√≠vel. √Åudio salvo localmente."
                        )
                        return@launch
                    }
                    
                    _uiState.value = _uiState.value.copy(
                        statusText = "Servidor OK! Iniciando transcri√ß√£o ($audioSource)..."
                    )
                    
                    // Inicia a transcri√ß√£o do arquivo (processado ou original)
                    uploadProcessedAudio(fileToTranscribe, apiEndpoint)
                    
                } else {
                    _uiState.value = _uiState.value.copy(
                        statusText = "Erro: Arquivo n√£o encontrado para processamento."
                    )
                }
            } catch (e: Exception) {
                e.printStackTrace()
                _uiState.value = _uiState.value.copy(
                    statusText = "Erro ao parar grava√ß√£o: ${e.message}"
                )
            } finally {
                _uiState.value = _uiState.value.copy(
                    isProcessing = false
                )
                // Recarrega a lista de arquivos ap√≥s o processamento
                // A MainActivity ir√° recarregar automaticamente via seu callback
            }
        }
    }
    
    /**
     * Faz transcri√ß√£o do arquivo de √°udio processado usando OpenAI Whisper
     */
    private fun uploadProcessedAudio(processedFile: File, uploadUrl: String) {
        viewModelScope.launch(Dispatchers.IO) {
            try {
                println("=== INICIANDO TRANSCRI√á√ÉO ===")
                println("Arquivo: ${processedFile.absolutePath}")
                println("Tamanho: ${processedFile.length()} bytes")
                println("URL de transcri√ß√£o: $uploadUrl")
                
                _uiState.value = _uiState.value.copy(
                    isUploading = true,
                    uploadProgress = 0,
                    statusText = "Iniciando transcri√ß√£o do √°udio..."
                )
                
                // Callback para acompanhar progresso do upload/transcri√ß√£o
                val onProgress: (Long, Long) -> Unit = { uploaded, total ->
                    val percentage = if (total > 0) (uploaded * 100 / total).toInt() else 0
                    _uiState.value = _uiState.value.copy(
                        uploadProgress = percentage,
                        statusText = when {
                            percentage < 50 -> "Enviando √°udio: $percentage%"
                            percentage < 90 -> "Processando transcri√ß√£o: $percentage%"
                            else -> "Finalizando transcri√ß√£o: $percentage%"
                        }
                    )
                }
                
                // Executa a transcri√ß√£o usando o m√©todo conveniente ou personalizado
                val result = if (uploadUrl.contains("transcricao")) {
                    // Usa o m√©todo conveniente para transcri√ß√£o
                    uploadService.transcribeAudio(
                        audioFile = processedFile,
                        onProgress = onProgress
                    )
                } else {
                    // Usa o m√©todo customizado se for outro endpoint
                    uploadService.uploadProcessedAudio(
                        uploadUrl = uploadUrl,
                        audioFile = processedFile,
                        language = "pt",
                        modelSize = "medium",
                        highQuality = true,
                        onProgress = onProgress
                    )
                }
                
                // Trata o resultado da transcri√ß√£o
                when (result) {
                    is AudioUploadService.UploadResult.Success -> {
                        _uiState.value = _uiState.value.copy(
                            isUploading = false,
                            uploadProgress = 100,
                            statusText = "Transcri√ß√£o conclu√≠da com sucesso! Texto extra√≠do do √°udio."
                        )
                        println("Transcri√ß√£o bem-sucedida: ${result.response}")
                        // TODO: Aqui voc√™ pode processar o texto transcrito (result.response)
                        // Por exemplo, salvar em um arquivo ou exibir na interface
                    }
                    is AudioUploadService.UploadResult.Error -> {
                        _uiState.value = _uiState.value.copy(
                            isUploading = false,
                            uploadProgress = 0,
                            statusText = "√Åudio salvo, mas falha na transcri√ß√£o: ${result.message}"
                        )
                        println("Erro na transcri√ß√£o: ${result.message}")
                    }
                }
                
            } catch (e: Exception) {
                _uiState.value = _uiState.value.copy(
                    isUploading = false,
                    uploadProgress = 0,
                    statusText = "√Åudio salvo, mas erro na transcri√ß√£o: ${e.message}"
                )
                println("Exce√ß√£o durante transcri√ß√£o: ${e.message}")
                e.printStackTrace()
            }
        }
    }
    
    /**
     * Permite fazer transcri√ß√£o manual de um arquivo de √°udio espec√≠fico
     */
    fun transcribeAudioFile(audioFile: File, uploadUrl: String? = null) {
        if (!audioFile.exists()) {
            _uiState.value = _uiState.value.copy(
                statusText = "Erro: Arquivo n√£o encontrado para transcri√ß√£o."
            )
            return
        }
        
        // Usa o endpoint de transcri√ß√£o padr√£o se n√£o especificado
        val transcriptionUrl = uploadUrl ?: Config.transcriptionUrl
        uploadProcessedAudio(audioFile, transcriptionUrl)
    }
    
    /**
     * M√©todo legado para compatibilidade - redireciona para transcri√ß√£o
     */
    @Deprecated("Use transcribeAudioFile instead", ReplaceWith("transcribeAudioFile(audioFile, uploadUrl)"))
    fun uploadAudioFile(audioFile: File, uploadUrl: String = Config.transcriptionUrl) {
        transcribeAudioFile(audioFile, uploadUrl)
    }
    
    /**
     * Cancela o upload em progresso (se implementado no futuro)
     */
    fun cancelUpload() {
        if (_uiState.value.isUploading) {
            _uiState.value = _uiState.value.copy(
                isUploading = false,
                uploadProgress = 0,
                statusText = "Upload cancelado pelo usu√°rio."
            )
        }
    }

    fun saveProcessedAudio(): String? {
        println("=== SALVANDO √ÅUDIO PROCESSADO ===")
        val processedFile = audioService.getLatestProcessedFile()
        println("Arquivo processado obtido: ${processedFile?.absolutePath}")
        
        return processedFile?.let { file ->
            println("Arquivo existe: ${file.exists()}")
            println("Tamanho do arquivo: ${file.length()} bytes")
            
            // S√≥ tenta salvar se o arquivo processado existe e tem conte√∫do
            if (file.exists() && file.length() > 44) { // 44 bytes = cabe√ßalho WAV m√≠nimo
                println("‚úÖ Arquivo processado v√°lido - salvando...")
                // Esta fun√ß√£o ser√° chamada pela MainActivity para salvar no Downloads
                onProcessedAudioSaved?.invoke(file) // Chama o callback com o arquivo processado
                return file.absolutePath
            } else {
                println("‚ùå Arquivo processado inv√°lido ou muito pequeno")
                null
            }
        } ?: run {
            println("‚ùå Nenhum arquivo processado encontrado")
            null
        }
    }

    // Fun√ß√µes de Reprodu√ß√£o
    fun playAudioFile(filePath: String) {
        viewModelScope.launch {
            _uiState.value = _uiState.value.copy(
                statusText = "Reproduzindo...",
                isPlaying = true,
                isPaused = false,
                currentPlayingFile = filePath,
                hasActiveAudio = true
            )
            val success = withContext(Dispatchers.IO) {
                audioService.playLocalWavFile(filePath)
            }
            if (!success) {
                _uiState.value = _uiState.value.copy(
                    statusText = "Erro ao reproduzir o arquivo.",
                    isPlaying = false,
                    hasActiveAudio = false
                )
            }
        }
    }

    fun pausePlayback() {
        audioService.pausePlayback()
        _uiState.value = _uiState.value.copy(
            isPlaying = false,
            isPaused = true,
            statusText = "Pausado"
        )
    }

    fun resumePlayback() {
        audioService.resumePlayback(viewModelScope)
        _uiState.value = _uiState.value.copy(
            isPlaying = true,
            isPaused = false,
            statusText = "Reproduzindo..."
        )
    }

    fun stopPlayback() {
        audioService.stopPlayback()
        _uiState.value = _uiState.value.copy(
            isPlaying = false,
            isPaused = false,
            currentPlayingFile = null,
            currentPosition = 0,
            totalDuration = 0,
            playbackProgress = 0f,
            hasActiveAudio = false,
            statusText = "Pronto para gravar"
        )
    }

    fun seekTo(timeMs: Long) {
        // Atualiza imediatamente a posi√ß√£o na UI para feedback visual instant√¢neo
        val boundedTime = timeMs.coerceIn(0L, _uiState.value.totalDuration)
        
        // Atualiza a UI imediatamente para resposta r√°pida
        _uiState.value = _uiState.value.copy(
            currentPosition = boundedTime,
            playbackProgress = if (_uiState.value.totalDuration > 0) {
                boundedTime.toFloat() / _uiState.value.totalDuration.toFloat()
            } else 0f
        )
        
        // Executa o seek no AudioService de forma ass√≠ncrona
        viewModelScope.launch {
            try {
                // Pequeno delay para permitir que a UI se atualize
                delay(50)
                audioService.seekTo(boundedTime, viewModelScope)
            } catch (e: Exception) {
                println("Erro durante seek no ViewModel: ${e.message}")
                e.printStackTrace()
            }
        }
    }
    
    // Incrementa o tempo atual de grava√ß√£o (em ms)
    fun incrementCurrentPosition(deltaMs: Long) {
        _uiState.value = _uiState.value.copy(
            currentPosition = _uiState.value.currentPosition + deltaMs
        )
    }

    // Fun√ß√£o para testar a API manualmente
    fun testAPI() {
        viewModelScope.launch {
            _uiState.value = _uiState.value.copy(
                statusText = "Testando conex√£o com API..."
            )
            
            val apiEndpoint = Config.uploadUrl
            val result = audioService.testAPIConnection(apiEndpoint)
            
            _uiState.value = _uiState.value.copy(
                statusText = if (result) "API conectada com sucesso!" else "Falha na conex√£o com a API"
            )
        }
    }

    // Fun√ß√£o para testar conectividade b√°sica
    fun testBasicConnectivity() {
        viewModelScope.launch {
            _uiState.value = _uiState.value.copy(
                statusText = "Testando conectividade b√°sica..."
            )
            
            val apiEndpoint = Config.uploadUrl
            val result = audioService.testBasicConnectivity(apiEndpoint)
            
            _uiState.value = _uiState.value.copy(
                statusText = if (result) "Servidor respondendo!" else "Servidor n√£o responde"
            )
        }
    }

    // Fun√ß√µes para carregar arquivos e monitorar a reprodu√ß√£o
    fun loadWavFiles(listFilesProvider: () -> List<File>) {
        viewModelScope.launch {
            val files = withContext(Dispatchers.IO) {
                listFilesProvider()
            }
            _uiState.value = _uiState.value.copy(wavFiles = files)
        }
    }

    private fun startPlaybackMonitor() {
        viewModelScope.launch {
            while (true) {
                try {
                    val isPlayingFromService = audioService.isCurrentlyPlaying()
                    val totalDuration = audioService.getTotalPlaybackDuration()
                    val currentPosition = audioService.getCurrentPlaybackPosition()
                    val currentPlayingFile = audioService.getCurrentPlayingFile()

                    // Determina se h√° √°udio ativo (reproduzindo ou pausado)
                    val hasActiveAudio = currentPlayingFile != null && totalDuration > 0

                    // Atualiza o estado apenas se houver uma mudan√ßa significativa
                    if (_uiState.value.isPlaying != isPlayingFromService ||
                        _uiState.value.totalDuration != totalDuration ||
                        _uiState.value.hasActiveAudio != hasActiveAudio ||
                        currentPlayingFile != _uiState.value.currentPlayingFile) {

                        _uiState.value = _uiState.value.copy(
                            isPlaying = isPlayingFromService,
                            currentPosition = currentPosition,
                            totalDuration = totalDuration,
                            playbackProgress = if (totalDuration > 0) currentPosition.toFloat() / totalDuration.toFloat() else 0f,
                            hasActiveAudio = hasActiveAudio,
                            currentPlayingFile = currentPlayingFile
                        )
                    } else if (isPlayingFromService && !_uiState.value.isPaused && hasActiveAudio) {
                        // Atualiza apenas a posi√ß√£o durante a reprodu√ß√£o normal
                        // Usa toler√¢ncia maior durante opera√ß√µes de seek para evitar conflitos
                        val positionDifference = kotlin.math.abs(_uiState.value.currentPosition - currentPosition)
                        if (positionDifference > 200) { // Toler√¢ncia reduzida para 200ms para melhor sincroniza√ß√£o
                            _uiState.value = _uiState.value.copy(
                                currentPosition = currentPosition,
                                playbackProgress = if (totalDuration > 0) currentPosition.toFloat() / totalDuration.toFloat() else 0f
                            )
                        }
                    }

                    delay(500) // Atualiza a cada 500ms para melhor responsividade
                } catch (e: Exception) {
                    println("Erro no monitor de reprodu√ß√£o: ${e.message}")
                    e.printStackTrace()
                    delay(2000) // Em caso de erro, aguarda mais tempo
                }
            }
        }
    }

    // Pausa a grava√ß√£o
    fun pauseRecording() {
        wavRecorder.pauseRecording()
        _uiState.value = _uiState.value.copy(isPaused = true)
    }

    // Retoma a grava√ß√£o
    fun resumeRecording() {
        wavRecorder.resumeRecording()
        _uiState.value = _uiState.value.copy(isPaused = false)
    }
}

// Factory para criar o ViewModel com as depend√™ncias
class MainViewModelFactory(
    private val audioService: AudioService,
    private val wavRecorder: WavRecorder,
    private val context: Context
) : ViewModelProvider.Factory {
    override fun <T : ViewModel> create(modelClass: Class<T>): T {
        if (modelClass.isAssignableFrom(MainViewModel::class.java)) {
            @Suppress("UNCHECKED_CAST")
            return MainViewModel(audioService, wavRecorder, context) as T
        }
        throw IllegalArgumentException("Unknown ViewModel class")
    }
}